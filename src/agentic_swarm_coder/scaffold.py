"""Workspace bootstrapping helpers."""

from __future__ import annotations

import asyncio
from pathlib import Path
from typing import Iterable

from .logging import get_logger

LOGGER = get_logger("scaffold")


async def ensure_workspace_initialized(workspace: Path) -> None:
    """Ensure the workspace contains a basic project scaffold.

    If ``pyproject.toml`` already exists, nothing is done. If the directory is
    empty (or lacks a project definition), we attempt to initialise it with
    ``uv``. When ``uv`` is unavailable or fails, we fall back to writing a
    minimal Python package layout manually.
    """

    if (workspace / "pyproject.toml").exists():
        LOGGER.debug("Workspace already contains pyproject.toml; skipping scaffold.")
        return

    if not _workspace_is_empty(workspace):
        LOGGER.info(
            "Workspace has existing files but no pyproject.toml; skipping automatic init."
        )
        return

    LOGGER.info("Initialising workspace project structure.")
    if await _try_uv_initialise(workspace):
        LOGGER.info("Workspace initialised with uv.")
        return

    LOGGER.warning("uv initialisation unavailable; creating minimal scaffold manually.")
    _write_minimal_scaffold(workspace)


def _workspace_is_empty(workspace: Path) -> bool:
    return not any(workspace.iterdir())


async def _try_uv_initialise(workspace: Path) -> bool:
    """Attempt to initialise the workspace using ``uv``.

    Tries a couple of command variants; returns ``True`` on success.
    """

    uv_commands: Iterable[list[str]] = (
        ["uv", "project", "init", "--non-interactive"],
        ["uv", "init", "--package"],
    )

    for command in uv_commands:
        try:
            LOGGER.debug("Running %s", " ".join(command))
            proc = await asyncio.create_subprocess_exec(
                *command,
                cwd=str(workspace),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
            )
        except FileNotFoundError:
            LOGGER.debug("Command not found: %s", command[0])
            continue

        stdout, stderr = await proc.communicate()
        if proc.returncode == 0:
            LOGGER.debug("uv command succeeded: %s", " ".join(command))
            return True

        LOGGER.warning(
            "uv command failed (exit %s): %s\nstdout: %s\nstderr: %s",
            proc.returncode,
            " ".join(command),
            stdout.decode().strip(),
            stderr.decode().strip(),
        )

    return False


def _write_minimal_scaffold(workspace: Path) -> None:
    pyproject = """[project]\nname = \"agentic-workspace\"\nversion = \"0.1.0\"\ndescription = \"Generated by Agentic Swarm Coder\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = []\n"""

    (workspace / "pyproject.toml").write_text(pyproject, encoding="utf-8")
    (workspace / "README.md").write_text("# Agentic Workspace\n", encoding="utf-8")

    src_dir = workspace / "src"
    src_dir.mkdir(exist_ok=True)
    (src_dir / "__init__.py").write_text("", encoding="utf-8")

    tests_dir = workspace / "tests"
    tests_dir.mkdir(exist_ok=True)
    (tests_dir / "__init__.py").write_text("", encoding="utf-8")

    LOGGER.info("Minimal project scaffold created (pyproject, src/, tests/).")
