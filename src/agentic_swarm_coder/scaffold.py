"""Workspace bootstrapping helpers."""

from __future__ import annotations

import asyncio
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable

from .logging import get_logger

LOGGER = get_logger("scaffold")


@dataclass(frozen=True)
class ScaffoldConfig:
    """Configuration for workspace initialisation."""

    workspace: Path


async def ensure_workspace_initialized(workspace: Path) -> None:
    """Ensure the workspace contains a basic project scaffold.

    Prefers ``uv`` for project generation; falls back to a minimal manual
    scaffold if ``uv`` is unavailable. Existing workspaces with a
    ``pyproject.toml`` are left untouched.
    """

    config = ScaffoldConfig(workspace=workspace)
    initializer = WorkspaceInitializer(config)
    await initializer.ensure()


class WorkspaceInitializer:
    """Encapsulates the logic for preparing a workspace project."""

    def __init__(self, config: ScaffoldConfig) -> None:
        self.config = config

    async def ensure(self) -> None:
        target = self.config.workspace

        if (target / "pyproject.toml").exists():
            LOGGER.debug("Workspace already contains pyproject.toml; skipping scaffold.")
            return

        if not _workspace_is_empty(target):
            LOGGER.info(
                "Workspace has existing files but no pyproject.toml; skipping automatic init."
            )
            return

        LOGGER.info("Initialising workspace project structure at %s", target)
        LOGGER.info("Creating minimal scaffold (uv project template disabled).")
        self._write_minimal_scaffold()

    async def _try_uv_initialise(self) -> bool:
        """Attempt to initialise the workspace using ``uv`` commands.

        Returns ``True`` on success. Logs failures at INFO level so users
        understand the fallback path.
        """

        uv_commands: Iterable[list[str]] = (
            ["uv", "project", "init", "--non-interactive"],
            ["uv", "init", "--package"],
        )

        for command in uv_commands:
            try:
                LOGGER.debug("Running %s", " ".join(command))
                proc = await asyncio.create_subprocess_exec(
                    *command,
                    cwd=str(self.config.workspace),
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE,
                )
            except FileNotFoundError:
                LOGGER.info("uv command not found: %s", command[0])
                continue

            stdout, stderr = await proc.communicate()
            if proc.returncode == 0:
                LOGGER.debug("uv command succeeded: %s", " ".join(command))
                return True

            LOGGER.info(
                "uv command failed (exit %s): %s", proc.returncode, " ".join(command)
            )
            LOGGER.debug(
                "uv stdout: %s\nuv stderr: %s",
                stdout.decode().strip(),
                stderr.decode().strip(),
            )

        return False

    def _write_minimal_scaffold(self) -> None:
        """Write a minimal pyproject + src/tests scaffold to the workspace."""

        target = self.config.workspace
        pyproject = """
[project]
name = "agentic-workspace"
version = "0.1.0"
description = "Generated by Agentic Swarm Coder"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []
""".strip()

        (target / "pyproject.toml").write_text(pyproject + "\n", encoding="utf-8")
        (target / "README.md").write_text("# Agentic Workspace\n", encoding="utf-8")

        src_dir = target / "src"
        src_dir.mkdir(exist_ok=True)
        (src_dir / "__init__.py").write_text("", encoding="utf-8")

        tests_dir = target / "tests"
        tests_dir.mkdir(exist_ok=True)
        (tests_dir / "__init__.py").write_text("", encoding="utf-8")

        LOGGER.info("Minimal project scaffold created (pyproject, src/, tests/).")


def _workspace_is_empty(workspace: Path) -> bool:
    return not any(workspace.iterdir())
